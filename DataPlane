/*
 * Fixed Temperature & Humidity Sensor Implementation
 * Compatible with SDNDataPlane library
 */

#include "SDNDataPlane.h"

// Sensor pins - Using ESP32 ADC capable pins
#define TEMP_SENSOR_PIN 34        // GPIO34 (ADC1_CH6)
#define HUMIDITY_SENSOR_PIN 35    // GPIO35 (ADC1_CH7)

// Create specialized sensor class
class TemperatureHumiditySensor : public SDNDataPlane {
private:
  float temperature = 0.0;
  float humidity = 0.0;
  
public:
  TemperatureHumiditySensor() : SDNDataPlane(80) {}
  
  void initializeSensor() {
    // Create DeviceCapability structure
    DeviceCapability cap;
    cap.deviceName = "Temperature & Humidity Sensor";
    cap.deviceType = "sensor";
    cap.description = "ESP32 Temperature and Humidity Sensor";
    cap.firmwareVersion = "1.0.0";
    cap.hardwareVersion = "ESP32-WROOM-32";
    
    // Allocate sensor array
    cap.sensorCount = 2;
    cap.sensors = new SensorCapability[2];
    
    // Temperature sensor capability
    cap.sensors[0].sensorType = "temperature";
    cap.sensors[0].dataType = "float";
    cap.sensors[0].unit = "°C";
    cap.sensors[0].minValue = -40.0;
    cap.sensors[0].maxValue = 85.0;
    cap.sensors[0].accuracy = 0.5;
    
    // Humidity sensor capability
    cap.sensors[1].sensorType = "humidity";
    cap.sensors[1].dataType = "float";
    cap.sensors[1].unit = "%";
    cap.sensors[1].minValue = 0.0;
    cap.sensors[1].maxValue = 100.0;
    cap.sensors[1].accuracy = 2.0;
    
    // No actuators for sensor device
    cap.actuatorCount = 0;
    cap.actuators = nullptr;
    
    // Default read interval
    cap.readInterval = 10; // seconds
    
    // Set the capability
    setCapability(cap);
    
    // Initialize sensor pins
    pinMode(TEMP_SENSOR_PIN, INPUT);
    pinMode(HUMIDITY_SENSOR_PIN, INPUT);
    
    Serial.println("Temperature & Humidity Sensor initialized");
    Serial.println("Using pins: Temp=" + String(TEMP_SENSOR_PIN) + ", Humidity=" + String(HUMIDITY_SENSOR_PIN));
  }
  
  // Override the virtual method collectSensorData() from base class
  String collectSensorData() override {
    // Read actual sensor values
    readSensors();
    
    // Create sensor data response
    StaticJsonDocument<1024> data;
    data["deviceId"] = getDeviceId();  // Use public method
    data["deviceName"] = "Temperature & Humidity Sensor";
    data["timestamp"] = millis();
    
    JsonArray readings = data.createNestedArray("readings");
    
    // Temperature reading
    JsonObject tempReading = readings.createNestedObject();
    tempReading["type"] = "temperature";
    tempReading["value"] = temperature;
    tempReading["unit"] = "°C";
    tempReading["status"] = "ok";
    
    // Humidity reading
    JsonObject humReading = readings.createNestedObject();
    humReading["type"] = "humidity";
    humReading["value"] = humidity;
    humReading["unit"] = "%";
    humReading["status"] = "ok";
    
    // Check memory usage
    size_t memoryUsed = data.memoryUsage();
    if (memoryUsed > 900) {
      Serial.println("WARNING: JSON memory usage high: " + String(memoryUsed) + "/1024");
    }
    
    String response;
    serializeJson(data, response);
    return response;
  }
  
  // Override executeCommand for actuator functionality (even though this is a sensor)
  bool executeCommand(String command, String value) override {
    Serial.println("Sensor received command: " + command + " = " + value);
    
    // Sensors typically don't execute commands, but we can add some utility commands
    if (command == "reset") {
      temperature = 0.0;
      humidity = 0.0;
      return true;
    } else if (command == "calibrate") {
      // Implement calibration logic here
      Serial.println("Calibration command received");
      return true;
    }
    
    return false;
  }
  
private:
  void readSensors() {
    // Read temperature (simulated with analog reading)
    int tempReading = analogRead(TEMP_SENSOR_PIN);
    temperature = (float(tempReading) * 3.3f / 4095.0f) * 100.0f - 50.0f;
    
    // Read humidity (simulated with analog reading)
    int humidityReading = analogRead(HUMIDITY_SENSOR_PIN);
    humidity = (float(humidityReading) * 3.3f / 4095.0f) * 100.0f;
    
    // Add some realistic noise
    temperature += random(-10, 10) / 10.0f;
    humidity += random(-50, 50) / 10.0f;
    
    // Constrain values to realistic ranges
    temperature = constrain(temperature, -40.0f, 85.0f);
    humidity = constrain(humidity, 0.0f, 100.0f);
    
    Serial.println("Sensor Readings:");
    Serial.println("  Temperature: " + String(temperature, 2) + "°C");
    Serial.println("  Humidity: " + String(humidity, 2) + "%");
  }
};

// Global sensor instance
TemperatureHumiditySensor sensor;

// Callback functions (optional)
void onCommandReceived(Command cmd) {
  Serial.println("Command callback: " + cmd.command + " = " + cmd.value);
}

void onStatusChanged(String status) {
  Serial.println("Status changed: " + status);
}

bool onSensorRead(String sensorType, float& value, String& unit) {
  // This callback can be used for custom sensor reading logic
  // Return false to use default implementation
  return false;
}

void setup() {
  Serial.begin(115200);
  delay(1000); // Wait for serial to initialize
  
  Serial.println("\n=== Temperature & Humidity Sensor Starting ===");
  
  // Configure ADC resolution for ESP32
  analogReadResolution(12); // 12-bit resolution (0-4095)
  
  // Initialize sensor-specific features
  sensor.initializeSensor();
  
  // Set callbacks (optional)
  sensor.setCallbacks(onCommandReceived, onStatusChanged, onSensorRead);
  
  // Start SDN Data Plane
  sensor.begin();
  
  Serial.println("Sensor ready!");
  Serial.println("Initial Mode: AP (waiting for Control Plane discovery)");
  Serial.println("ESP32 ADC Resolution: 12-bit");
  Serial.println("Device ID: " + sensor.getDeviceId());
}

void loop() {
  // Main SDN Data Plane loop
  sensor.loop();
  
  // Additional sensor-specific code can go here
  // The library will automatically handle:
  // - Web server requests
  // - Configuration management
  // - Data transmission to control plane
  // - State management
  
  delay(10); // Small delay to prevent watchdog issues
}

/*
 * Expected Flow:
 * 1. Sensor boots in AP mode: "ESP32_Device_XXXX"
 * 2. Control Plane scans WiFi, finds this AP
 * 3. Control Plane connects to AP and calls GET /api/info
 * 4. Control Plane gets device capability information
 * 5. Control Plane sends configuration via POST /api/config
 * 6. Sensor switches to STA mode and connects to main network
 * 7. Sensor automatically registers with Control Plane
 * 8. Sensor starts sending data based on configured interval
 * 
 * Debug via Serial Monitor:
 * - Device state transitions
 * - Sensor readings
 * - Network events
 * - Command executions
 */
